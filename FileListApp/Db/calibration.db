# A db file that takes a PV and converts it to another value using a lookup table selected by the user. Also converts associated set points etc.
# 
# CALIB_BASE_DIR = The base directory for where the calibration files are
# SDIR = The path from the CALIB_BASE_DIR for the calibration files
# DEFAULT_FILE = The file for a null conversion
# CALIBLIST = The port for FileList
# CONV_TO_PV = Name of the PV to convert to e.g. TEMP in a eurotherm
# CONV_FROM_PV = Name of the PV to convert from e.g. blank in a eurotherm (for the sensor)
# CONV_TO_DESC = Human readable description of what we're converting to e.g. Temperature in a eurotherm
# CONV_TO_EGU = The EGU that we're converting to e.g. K in eurotherm
record(stringin, "$(P)CAL:SEL:RBV") {
    info(INTEREST, "MEDIUM")
    field(DESC, "Calibration file")
    field(DTYP, "Soft Channel")
    field(INP, "$(P)$(CONV_TO_PV).NSPE MS")
    field(PINI, "YES")
    field(SCAN, "1 second")
    info(archive, "VAL")
}

record(stringin, "$(P)CAL:RBV")
{
    field(DESC, "Current Calibration file")
    field(DTYP, "Soft Channel")
    field(INP, "$(P)$(CONV_TO_PV).SPEC MS")
    field(PINI, "YES")
    field(SCAN, "1 second")
    info(archive, "VAL")
}

record(bi, "$(P)CAL:APPLY")
{
    field(DTYP, "Soft Channel")
    field(ZNAM, "WAIT")
    field(ONAM, "APPLY")
    field(VAL, "0")
    field(FLNK, "$(P)CAL:APPLY:UPDATE.PROC")
}

record(bo, "$(P)CAL:APPLY:RST")
{
    field(DTYP, "Soft Channel")
    field(ZNAM, "STOP APPLY")
    field(ONAM, "")
    field(VAL, "0")
    field(OUT, "$(P)CAL:APPLY")
}

record(stringout, "$(P)CAL:SEL")
{
    field(DESC, "Set Calibration file")
    field(DTYP, "Soft Channel")
    field(FLNK, "$(P)CAL:SEL:UPDATE.PROC")
    field(PINI, "YES")
    field(VAL, "$(DEFAULT_FILE=None.txt)")
    info(archive, "VAL")
    info(autosaveFields, "VAL")
}

record(sseq, "$(P)CAL:SEL:UPDATE")
{
    field(DOL1, "$(P)CAL:SEL.VAL")
    field(LNK1, "$(P)$(CONV_TO_PV).NSPE")
    field(DOL2, "$(P)CAL:SEL")
    field(LNK2, "$(P)$(CONV_TO_PV):SP:RBV:CONV.NSPE")
    field(DOL3, "$(P)CAL:SEL")
    field(LNK3, "$(P)$(CONV_TO_PV):HIGHLIMIT.NSPE")
    field(DOL4, "$(P)CAL:SEL")
    field(LNK4, "$(P)$(CONV_TO_PV):LOWLIMIT.NSPE")
    field(DOL5, "$(P)CAL:SEL")
    field(LNK5, "$(P)$(CONV_TO_PV):SP:CONV.NSPE")
    field(DOL6, "1")
    field(LNK6, "$(P)CAL:SEL:UPDATE:NOW.PROC")

}

record(dfanout, "$(P)CAL:SEL:UPDATE:NOW")
{
    field(VAL, "1")
    field(OUTA, "$(P)CAL:APPLY.VAL")
    field(OUTB, "$(P)CAL:APPLY.PROC")
}

record(seq, "$(P)CAL:APPLY:UPDATE")
{
    field(DOL1, "$(P)CAL:APPLY")
    field(LNK1, "$(P)$(CONV_TO_PV).INIT PP")
    field(DOL2, "$(P)CAL:APPLY")
    field(LNK2, "$(P)$(CONV_TO_PV):SP:RBV:CONV.INIT PP")
    field(DOL3, "$(P)CAL:APPLY")
    field(LNK3, "$(P)$(CONV_TO_PV):HIGHLIMIT.INIT PP")
    field(DOL4, "$(P)CAL:APPLY")
    field(LNK4, "$(P)$(CONV_TO_PV):LOWLIMIT.INIT PP")
    field(DOL5, "$(P)CAL:APPLY")
    field(LNK5, "$(P)$(CONV_TO_PV):SP:CONV.INIT NPP")
    field(DOL6, "0")
    field(DLY6, "2")
    field(LNK6, "$(P)CAL:APPLY:RST.PROC")
}

# FileList for sensor calibration
#######################

record(waveform, "$(P)CALIB_DIRBASE:SP")
{
    field(DESC, "Set directory of calib files")
    field(DTYP, "asynOctetWrite")
    field(PINI, "NO")
    field(INP, "@asyn($(CALIBLIST),0,1)DIRBASE")
    field(FTVL, "CHAR")
    field(NELM, 256)
}

record(waveform, "$(P)CALIB_DIRBASE")
{
    field(DESC, "Get directory of calib files")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(CALIBLIST),0,1)DIRBASE")
    field(SCAN, "I/O Intr")
    field(FTVL, "CHAR")
    field(NELM, 256)
}

record(waveform, "$(P)CALIB_FILES")
{
    field(DESC, "Compressed JSON list of calib files")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(CALIBLIST),0,1)JARR")
    field(NELM, 16384)
    field(SCAN, "I/O Intr")
}

record(waveform, "$(P)CALIB_PATTERN:SP")
{
    field(DESC, "Set regex search of calib files")
    field(DTYP, "asynOctetWrite")
    field(INP, "@asyn($(CALIBLIST),0,1)SEARCH")
    field(FTVL, "CHAR")
    field(NELM, 256)
}
record(waveform, "$(P)CALIB_PATTERN")
{
    field(DESC, "Get regex search of calib files")
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(CALIBLIST),0,1)SEARCH")
    field(PINI, "NO")
    field(SCAN, "I/O Intr")
    field(FTVL, "CHAR")
    field(NELM, 256)
}

record(cvt, "$(P)$(CONV_TO_PV)")
{
    field(SCAN, "Passive")
    field(DESC, "$(CONV_TO_DESC)")
    info(INTEREST, "HIGH")
    field(INPY, "$(P)$(CONV_FROM_PV)RBV CP MS")
    field(YSLO, 1)
    field(METH, "1D TABLE INVERTED")
    field(SPEC, "$(DEFAULT_FILE=None.txt)")
    field(TDIR, "$(SDIR)")
    field(BDIR, "$(CALIB_BASE_DIR)")
    field(PREC, "3")
    info(archive, "VAL")
    field(EGU, "$(CONV_TO_EGU)")
}

record(cvt, "$(P)$(CONV_TO_PV):SP:RBV:CONV")
{
    field(SCAN, "Passive")
    field(INPY, "$(P)$(CONV_FROM_PV)SP:RBV MS")
    field(OUT, "$(P)$(CONV_TO_PV):SP:RBV PP MS")
    field(YSLO, 1)
    field(METH, "1D TABLE INVERTED")
    field(SPEC, "$(DEFAULT_FILE=None.txt)")
    field(PREC, "3")
    field(TDIR, "$(SDIR)")
    field(BDIR, "$(CALIB_BASE_DIR)")
}

record(cvt, "$(P)$(CONV_TO_PV):HIGHLIMIT")
{
    field(SCAN, "Passive")
    field(INPY, "$(P)$(CONV_FROM_PV)HILIM PP")
    field(YSLO, 1)
    field(METH, "1D TABLE INVERTED")
    field(SPEC, "$(DEFAULT_FILE=None.txt)")
    field(TDIR, "$(SDIR)")
    field(BDIR, "$(CALIB_BASE_DIR)")
    field(PREC, "3")
    info(archive, "VAL")
    field(EGU, "$(CONV_TO_EGU)")
}

record(cvt, "$(P)$(CONV_TO_PV):LOWLIMIT")
{
    field(SCAN, "Passive")
    field(INPY, "$(P)$(CONV_FROM_PV)LOWLIM PP")
    field(YSLO, 1)
    field(METH, "1D TABLE INVERTED")
    field(SPEC, "$(DEFAULT_FILE=None.txt)")
    field(TDIR, "$(SDIR)")
    field(BDIR, "$(CALIB_BASE_DIR)")
    field(PREC, "3")
    info(archive, "VAL")
    field(EGU, "$(CONV_TO_EGU)")
}

record(cvt, "$(P)$(CONV_TO_PV):SP:CONV")
{
    field(OUT, "$(P)$(CONV_FROM_PV)SP PP")
    field(INPX, "$(P)$(SP_PV=$(CONV_TO_PV):SP)")
    field(YSLO, 1)
    field(METH, "1D TABLE")
    field(SPEC, "$(DEFAULT_FILE=None.txt)")
    field(TDIR, "$(SDIR)")
    field(BDIR, "$(CALIB_BASE_DIR)")
    field(PREC, "3")
}

